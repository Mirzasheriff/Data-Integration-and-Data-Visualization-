ðŸ“˜ Assignment: Scenario-Based Data Integration & Analysis with Pandas
ðŸ§© Business Scenario:
You are a Data Analyst at a tech retail company. Your task is to combine and analyze order data from various sources:

ðŸŸ¡ Online Store (CSV)
ðŸŸ¢ Retail Stores (Excel)
ðŸ”µ API Responses (Python Dictionary)
ðŸ”´ Warehouse Database (SQLite)
ðŸŸ£ Mobile Sales App (JSON)
You have already:
# 5. Dictionary / API
df_dict = pd.DataFrame({
    "order_no": [501, 502],
    "client": ["Ivy", "Jack"],
    "product_name": ["Tablet", "Laptop"],
    "qty_ordered": [2, 1],
    "unit_cost": [650, 1250],
    "date_of_order": pd.to_datetime(["2024-05-02", "2024-05-03"])
})

Ingested and standardized data from 5 sources
Merged them into one DataFrame: df_combined
Created derived columns: TotalAmount, Month
Now, answer the following scenario-based questions.

âœ… Section 1: Data Understanding & Quality
1. How many records are there in total after merging all sources?  
10 records

2. Are there any missing values in critical columns like Product, Quantity, or UnitPrice? How would you handle them?
No

Suggest cleanup strategies like:

Dropping rows
Filling with mean/median
Using business rules
âœ… Section 2: Transformation & Aggregation
3. Calculate the total revenue generated by each data source. How would you track the source of each row?
Hint: Add a Source column to each individual DataFrame before merging.
Group by Source, then sum TotalAmount.z

4. What is the total quantity sold for each product?

5. Which month had the highest total sales revenue?


Section 3: Business Insight
6. Who are the top 3 customers based on total purchase value?

7. Which product generated the highest revenue and how many orders did it receive?


8. What is the average order value (AOV) across all orders?

 Section 4: Anomaly Detection
9. Identify the top 5 orders with the highest UnitPrice. Are these values realistic?

10. Detect outliers in pricing using standard deviation method. List them and suggest actions.
ðŸ“¤ Bonus Challenge
Export the final DataFrame to Excel:




import pandas as pd
import sqlite3

df_csv = pd.read_csv('data_csv.csv')

df_excel = pd.read_excel('data_excel.xlsx')

df_json = pd.read_json('data_json.json')

df_dict = pd.DataFrame({
    "order_no": [501, 502],
    "client": ["Ivy", "Jack"],
    "product_name": ["Tablet", "Laptop"],
    "qty_ordered": [2, 1],
    "unit_cost": [650, 1250],
    "date_of_order": pd.to_datetime(["2024-05-02", "2024-05-03"])
    })

conn = sqlite3.connect("data_orders.sqlite")

df_sql = pd.read_sql_query("select * from WarehouseOrders",conn)

print(df_excel.shape[0])
print(df_csv.shape[0])
print(df_json.shape[0])
print(df_sql.shape[0])
print(df_dict.shape[0])

print(df_dict.columns.to_list)

df_excel.rename(columns={
  'OrderID':'ID', 
  'Customer':'Name',
  'Product':'Item', 
  'Qty':'Count', 
  'UnitPrice':'PricePerUnit', 
  'OrderDate':'Date'
},inplace=True)

df_json.rename(columns={
  'Order_ID':'ID', 
  'Cust':'Name',
  'Item_Name':'Item', 
  'Quantity':'Count', 
  'Price':'PricePerUnit', 
  'SaleDate':'Date'
},inplace=True)

df_sql.rename(columns={
  'OID':'ID', 
  'CustName':'Name',
  'Prod':'Item', 
  'Qty':'Count', 
  'Rate':'PricePerUnit', 
  'OD':'Date'
},inplace=True)

df_dict.rename(columns={
  'order_no':'ID', 
  'client':'Name',
  'product_name':'Item', 
  'qty_ordered':'Count', 
  'unit_cost':'PricePerUnit', 
  'date_of_order':'Date'
},inplace=True)

df_csv['Source'] = 'Store1'
df_excel['Source'] = 'Store2'
df_json['Source'] = 'Store3'
df_sql['Source'] = 'Store4'
df_dict['Source'] = 'Store5'


df_combined = pd.concat([df_csv,df_excel,df_json,df_sql,df_dict],ignore_index=True)

print(df_combined)
print(len(df_combined))
cols = ['Item','Count','PricePerUnit']
check_null = df_combined[cols].isna()
print(check_null)

df_combined_grouped = df_combined.groupby('Source')['PricePerUnit'].sum()
print(df_combined_grouped)

df_quantity_for_sold_each_product = df_combined.groupby('Item')['Count'].sum()
print(df_quantity_for_sold_each_product)

print(df_combined.dtypes)
df_combined['Name'] = df_combined["Name"].astype('string')
df_combined['Item'] = df_combined['Item'].astype('string')
df_combined['Date'] = df_combined['Date'].astype('datetime64[ns]')
df_combined['Source'] = df_combined['Source'].astype('string')
print(df_combined.dtypes)


df_combined['Month'] = df_combined['Date'].dt.strftime('%B')
df_combined['Month'] = df_combined['Month'].astype('string')
print(df_combined)

df_combined['total_sales'] = df_combined['Count'] * df_combined['PricePerUnit']
print(df_combined)

high_sales_month_group = df_combined.groupby('Month')['total_sales'].sum()
high_sales_month_group_sort = high_sales_month_group.sort_values(ascending=False)
top_month = high_sales_month_group_sort.index[0]
print(top_month)


print(df_combined)
# top 3 customers
top_cust = df_combined.groupby('Name')['total_sales'].sum()
cust_ord = top_cust.sort_values(ascending=False)
top_cust_3 = cust_ord.head(3)
print(top_cust_3)


high_reven_pro = df_combined.groupby('Item')['total_sales'].sum()
top_pro = high_reven_pro.idxmax()
order_count = df_combined[df_combined['Item']==top_pro].shape[0]

print(f"Top product is: {top_pro} and count is {order_count}")
print(df_combined)

avg_value = df_combined['total_sales'].mean()
print(avg_value)

top_5_ord = df_combined.sort_values(by='PricePerUnit',ascending=False).head(5)
print(top_5_ord)

print(df_combined[df_combined["PricePerUnit"] > df_combined["PricePerUnit"].mean() + 2 * df_combined["PricePerUnit"].std()])


df_combined.to_excel('df_combined.xlsx')

